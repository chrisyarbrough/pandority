namespace Pandority
{
	using Microsoft.CodeAnalysis;
	using System;
	using System.IO;
	using System.Runtime.InteropServices;
	using static System.Environment;

	/// <summary>
	/// Represents an instance of a log file.
	/// </summary>
	/// <remarks>
	/// The class uses lazy initialization to avoid performance penalties when it is unused (e.g. in release mode).
	/// </remarks>
	internal class Log : ILog
	{
		private readonly FileNameBuilder nameBuilder;
		private SharedFile? file;

		public Log(FileNameBuilder nameBuilder)
		{
			this.nameBuilder = nameBuilder;
		}

		public void WriteLine(object message, GeneratorExecutionContext? context = null)
		{
			file = EnsureInitialized(ref file, context);
			file.WriteAtomicLine(message);
		}

		private SharedFile EnsureInitialized(ref SharedFile? sharedFile, GeneratorExecutionContext? context)
		{
			if (sharedFile == null)
			{
				string fileName = nameBuilder.Build(context);
				string logFilePath = InitializeLogFilePath(fileName);
				sharedFile = new SharedFile(logFilePath);
			}
			return sharedFile;
		}

		private string InitializeLogFilePath(string fileName)
		{
			string logDirectory = GetPlatformLogDirectory();
			Directory.CreateDirectory(logDirectory);

			string logFilePath = Path.Combine(logDirectory, fileName);

			if (File.Exists(logFilePath))
				File.Delete(logFilePath);

			return logFilePath;
		}

		/// <summary>
		/// Follows the convention for log files generated by Unity.
		/// </summary>
		private static string GetPlatformLogDirectory()
		{
			// This follows the convention of the Unity log files.
			if (RuntimeInformation.IsOSPlatform(OSPlatform.OSX))
				return GetFolderPath(SpecialFolder.UserProfile) + "/Library/Logs/Pandority";

			else if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
				return GetFolderPath(SpecialFolder.LocalApplicationData) + "\\Pandority";

			else if (RuntimeInformation.IsOSPlatform(OSPlatform.Linux))
				return GetFolderPath(SpecialFolder.UserProfile) + "/.config/Pandority";

			throw new NotSupportedException("Unsupported platform.");
		}
	}
}